# -*- coding: utf-8 -*-
"""
Created on Tue Oct 18 11:53:40 2022

@author: Weave
"""
import sys
from pathlib import Path
py_dir = Path(__file__).parent
app_dir = py_dir.parent
sys.path.append(app_dir.as_posix())

import pytesseract
import collections
from PIL import Image, ImageSequence
from io import BytesIO, StringIO

if sys.platform == "win32":
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
else:
    pytesseract.pytesseract.tesseract_cmd = "/usr/local/bin/tesseract"



def from_file(fp:Path, method=False, lang:str='eng', **args) -> str:
    """
    
    """
    img = Image.open(fp)
    if method:
        threshold = args.get('threshold')
        if not threshold:
            threshold = get_threshold(img)[0]
            print('threshold:', threshold)
        img = processing_image(img, threshold)
    img.show()
    return pytesseract.image_to_string(img, lang=lang).strip()

def from_str(content:str, method=False, lang:str='eng', **args) -> str:
    """
    
    """
    img = Image.open(StringIO(content))
    if method:
        threshold = args.get('threshold')
        img = processing_image(img, threshold)
    return pytesseract.image_to_string(img, lang=lang).strip()

def from_bytes(content:bytes, method=False, lang:str='eng', **args) -> str:
    """
    
    """
    img = Image.open(BytesIO(content))
    if method:
        threshold = args.get('threshold')
        img = processing_image(img, threshold)
    return pytesseract.image_to_string(img, lang=lang).strip()

def get_threshold(image):
    pixel_dict = collections.defaultdict(int)

    # 像素及该像素出现次数的字典
    rows, cols = image.size
    for i in range(rows):
        for j in range(cols):
            pixel = image.getpixel((i, j))
            pixel_dict[pixel] += 1

    count_max = max(pixel_dict.values()) # 获取像素出现出多的次数
    pixel_dict_reverse = {v:k for k,v in pixel_dict.items()}
    threshold = pixel_dict_reverse[count_max] # 获取出现次数最多的像素点

    return threshold

def processing_image(img, threshold=185):
    img = img.convert('L')
    # threshold = threshold
    table = []
    for i in range(256):
        if i < threshold:
            table.append(0)
        else:
            table.append(1)
    
    img = img.point(table, '1')
    img_array = img.load()
    width = img.size[0]
    height = img.size[1]
    for i in range(0, 1000):
        for x in range(1, width - 1):
            for y in range(1, height - 1):
                count = 0
                if img_array[x, y] == img_array[x - 1, y + 1]:
                    count += 1
                if img_array[x, y] == img_array[x, y + 1]:
                    count += 1
                if img_array[x, y] == img_array[x + 1, y + 1]:
                    count += 1
                if img_array[x, y] == img_array[x - 1, y]:
                    count += 1
                if img_array[x, y] == img_array[x + 1, y]:
                    count += 1
                if img_array[x, y] == img_array[x - 1, y - 1]:
                    count += 1
                if img_array[x, y] == img_array[x, y - 1]:
                    count += 1
                if img_array[x, y] == img_array[x + 1, y - 1]:
                    count += 1
                if count <= 3 and count > 0:
                    img_array[x, y] = 1
    return img

def unzip_gif(fp:Path):
    img = Image.open(fp)
    
    save_dir = fp.parent.joinpath('tmp')
    for i0, frame in enumerate(ImageSequence.Iterator(img)):
        frame.save(save_dir.joinpath(f"frame{i0}.png"))
        i0 += 1

def color_rank(img: Image, count=10):
    img_array = img.load()
    width = img.size[0]
    height = img.size[1]
    
    counter = collections.Counter([img_array[x, y] for x in range(1, width - 1) for y in range(1, height - 1)])
    
    rank = sorted(counter.items(), key=lambda tup0: tup0[1])[-count:]
    rank = [tup0[0] for tup0 in color_rank]
    return rank

def pick_color(fp):
    """
    
    """
    img = Image.open(fp)
    img_array = img.load()
    width = img.size[0]
    height = img.size[1]
    
    counter = collections.Counter([img_array[x, y] for x in range(1, width - 1) for y in range(1, height - 1)])
    
    max4 = sorted(counter.items(), key=lambda tup0: tup0[1])[-10:]
    max4 = [tup0[0] for tup0 in max4]
    
    for x in range(1, width - 1):
        for y in range(1, height - 1):
            if img_array[x, y] != max4[2]:
                img_array[x, y] = (255,255,255)
        
    img.show()
    return pytesseract.image_to_string(img).strip()

if __name__ == "__main__":
    import pprint
    img_path = Path(r"C:\Users\Weave\Desktop\下载.png")
    img = Image.open(img_path)
    print(color_rank(img))
    
    
    # unzip_gif(Path(r'C:\Users\Weave\Downloads\creator2.gif'))
    # pprint.pprint(pick_color(Path(r'C:\Users\Weave\Downloads\tmp\frame7.png')))
    # print(pick_color(Path(r'C:\Users\Weave\Downloads\IdentifyingCode.jpg')))
    # print(from_str("\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x001\x00\x00\x00\x18\x08\x06\x00\x00\x00S?\x15\xe2\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc4\x00\x00\x0e\xc4\x01\x95+\x0e\x1b\x00\x00\x00\x11tEXtSoftware\x00Snipaste]\x17\xce\xdd\x00\x00\x07\x83IDATXGm\x97\xe9z\xdb6\x10E!\x92\xa26\xdbI\xd37m\x7f\xf4\xad\x93\xd8\x12EI\\\xd4s\x06\x84-\xfb\x0b\x12\x98$0\x18\xdc\xb9\xb3\x00Z\xfd\xfb\xcf\x7f\xf7\xbf\x7f|O\xeb\xf5:\xd9\xaa\xaaJ\xabU\x9d\xe6yN\xb7aH\xc7\xd31u\xfd%\xde\xe7\xfb\x9c\xa6qJ\xb7\xdb-M\xd3\x84\xec*\xd5u\x9d\xd6\xf4\xbai\xd2\xda\x8e\x9eu\xdd\xa4\xfb*\x85Li\xea\x9b\xa791\x1c\xedz\xbd\xb1\xcf*\xe4y\xa4q\x1c\xd3\xcc\xb8r\xf7\xfb=d\xd4m\x1f\xd8;\xe6\x97\xb9\x99\xee\xb3\xe8\xaa^\x9e\x9fS\xc3\xe6*\x8c\x810b\x15\x0b\x8e\xc7c:v]\xba\\\xafY\xd10\xc6S\x05\x1aP\xd5\x15\xc01\x02 \x9b\xb6M\xbb\xdd\x96g\x13zf\x8c]\x81%\xb4fL\xa9B\xaf\xa0\x8a~\xf5\xd8\x058\xd05\xba\x8c\x85<X\\<\xcfy\xdcv\x17\'}\xc5\\1\xb2\xdan\xb7\x8b\xb0\x8b\x9a\xd8\xc8\x85\x02?\x9d;<0\x05\xfb3\x1b\xb8\xb1M\x10\xabU\x95\xfcWW\x1a\xd1\xa4\xfd~\x0b\x195\x86\xcea\xa8-\x08\x89\x7f\xac\x01\x83\xdfy\xaf\xcfFL\xb3\xd6\xaa3\x13i\x0b\x92\xe8Y\x8e\x01\xe7X\xdb\xa8\xb3\xc8\xd2Cg]; ;Z\x95\'\xc6iL\x1d\x1e0l\xeew\xc1\x8f\xe9\x8e\xb2\x15\xda\xcaF\x1a\xab\x176\x9b\r\x06\x1c\x82\x11=%\xab\xcahP\x8d\xa7\xeae\xd30\x88g&4\xeb\xc9\xdf\x1f\xcc\xfb]\x9a\xef\x1a0\x11\x82\xe5;\x08X\xd6\x15Y\xd7\x82%\x7f\xc4\x93\xff.\x0c\xf7.a\xc3\x80\x92\x8a\x87LM7\xf6wxp\xbf\xdf\x87\x113L\xf6\xdd%]/K\x9cG~\xd4\xa9\xc5C\x1ac\xce4\x86\x11\xff2\xe8\x1c\xef\x82\xca\x06d#\x8awl>4\xc0\xb1O\r\xfd\xc1\xbe]\xcc4L\xd3\xbd\x91R\xb0\x8dk\x97\xb01\xbe+B\xa6\xc4i\xdd\xacSc\xec\x03\xfa\xb0\xdb\xa7\x03\x06\xb4\xeb6\x8c=\x91;\xa7S\x17\xb2\x825GZ\x0c\xd9\xb0f\xeb\x1a\x8c\xd1\xb8l@\xee\x85<\xdf\xdd\xaft\xbfm_\xbf\x95\xb7\x0b\xbc\x18Pt\x85\'J8\xb1&@Y\x85\xd6\x9b\xb5)\xc5\xb7\xe1Q%sgc\xfe4m$\xb4\xebFdo\x97k<\xf9\x8c\xdc\xd8m\xda\xd42/\xb9zT\xc3Fr\xca\xf7\x8f\xef\xfc\xb4g\xb0\x1f\xc6=\xb6\xf2\x1d\x7f\x03\'\x91`H)\xbb\xac\x1b&\x8c\x08)\xc4\xee\x007\xf6/\xb7k\xe4\xc2\xb9;/\x06\x00\x0e\xf6I\x9e\xd8p\x18n1\x7f]*\x96\xad\xa52\xb5-\xa5\x15#j\xba%\xd0\xf9\xbe\xef\xd3\xf9|I\xfd\x85\x12}\x1b\xa2\x02\xb9\xe6\xd1\x88\x91\xca\xf3\xb5\x15\xd6K\xb7\x85A\x82\x7f\x7f\x8a\xfa=\x9c\x1c3\x81\xc6tf\xd3\xee\xdc\xa7\xb7\xe3)\xfd~}\r\xd0;\xc3\x06\x90\x82\xe89/.\x97>\x0c\xb1Z\xa9\xd0\xd8\x8e\x12\x1d\x95db\xfe\x02\x01\x96\xe5\x1b\x05\x02\xbd\xe80\xb6\x030{\x8c\x82g?\xd9\xbdg\x0c\x91\x8b\xf1\x00p\xd1\x97\x0bC.\xc7\x86N\x83\xfe\\\xce!\x8aqK\xed\xc4\xfeb\xac\x0c\x1d\x999\x9e\x00\xfe\xfb\x8d\xb2z\xa6\x03\x94\xb15\xa1\xb1\xc6\x00\xe7e\xd6\xea\xe3~\xa1\x1c\xa5\xd6\xea\x00\xa32\xf4x vx\xf0\xca\xd3q\xe7A`\xb6\x85w"t\x90\xb3\xb9\xdeVBF\xe0\x92e>\x19\xf3\x01\x1e\x19\xc7\xf6\xfb]\x14\x91\xb6\xdd\x00\x9c\x83\x12<7+!\xa4\x84\x11\x9e\x9c\xc7.{``\x90]B\x89!d"\xc7\xf9\xc0"\xabo\xbb\xae\xd3\x96q\x15{B\x17 *\x8a\xc6\x06V/+\xd7\x13\x1bo!A]\xe2\x8c\x10BN\xd0\x8fab\x93\x14\x0b\x86z\xd5%\x19\x82\x1c\xc8\xa5\x81\xfd}\xef\xfakz=\x9d\xd3\xd9\x1c\xc4\xb3\x04T^\xac\xb1\xc7\xee\x94\xae\xe4\x81Cn\xd8\xa0hKe\xd2\x03~\xdbd$*\xce\x12\xf7e<\x16\x05\xb3sj9\xf4\x9ew\xbb\xf4\xfd\xfbKz~z\x8a\xdc\xd0\xdd\xcaV\xcc\t\xbe\xb0\x1e\xfb@\x82\xe03\xfb\xe4\x11\xa1\xa8\xb7\r\xc3a4\x0c1\x1c\xdaG\xde\xaf\xe6\x13\x86\xc8F\x1c\x9a\x14\x1a\x0f\xd9\xc6\x8e\x8eJ\x86\n\x93\xa1\xdcP\xf1\x9d\x05\xbe\xf9\xbd\xc1\x8d-F\xb8\x10\x0e\xa32\x84\xc7\x90k\x99?l\xb6\xe9\xdb\xd3sz:\xec\xe3\xded\xfe\x1cO}\x94\xdd\x1e\xe6\xcc\x01\xfbc\xd3\x13\x12c\xd76#\xc2\x82a\xbeM\x13\x15\x92"#.si\xb1\xfd\xdd\x83\xe2\x8b\xbex\x13\x92M\x1cb\xb0\x0c\xb2\xe2\xae\xbb\x00\xe9\xf7\x86\xb3\xc0\x8ddM\x8f("\xf85e\xf4\x19\x8f\xfd\xf8\xf6B\xff\x96\xf6\xdbM\xb0t\xe1\xc0;\xea\xf6\xb84\x12\xbb^\x16!\xea#\x8bu^>\x03\xec\x92\xa8L\t7[`\x91D\x146l(\x0e\t.O[\xf1\xac\x1d\\\x0c\xf2b\xcd\xf5\x96Y<\xe3\x02]\xee\x99\x10Zi\xba\xcf87\xde\xffz~J\xdf\x9f\x0e\xe9\x80\x97\xf4\xcft\xa3<\xc3foU"44\xd6u&\xb4\xb1\xcd#\x0cQw)\xb5\xf6b\x80\xd39\xf42\xd8\x02\xb8"\x19\x036\n$)\xa2\xe0K\xab\x8a2\xd92\x89\xd5\xa6aqu 4\xb2\x97\xa8\x12|?\xc1\xf67N\xeb\x97-I\xcbi,[\xc38D(\xf4\x84\xd0\x05C\x06\x0c(\xe1#\xb3\xc6\xb4\x87]\x9c\x0b\xce\xf1\x14t\x94Z\xbaF\x85}\x0f\xfd\x91\xf1\x1cN\xc8(\xeb;D\xaf \\\xe2\x8c"\x0f\xbf*\xdc\x1d\x82x\x02\x15\x12\xe8\x84\xf1\xaf"s\xe2@\xe5x9\xec\xd23}Gh)\xe3)\x1d\x0c\xb2\x81\xeb,}\x02\x17\x9c\xddP\xbar\x03\xd6(\xab^1\xca.\x97z(\xea<\xef\x02\xb7e\x90t\rcN\xfd\xd9S\x90L\x8eL\xb3\xb9\x92\x0fG\r\xad!X\x92\xab`Bet^b2_\xe0\xfc\x81C\xf8P\x91\x0ex@C4L\x80\x03\xe0\x94\xcfn\xaf\xc2\x88\x1b\x1b\x96\xe44\xb1\x0b\x83\xeaW\xb6\xb0\xcc\x02\xff~j\xc1\xa8\xba|_\xf2N\x03\xca\xe9^0\x86\xac\xe1\xe5\xcd\xdb(G\xce*O\x11\xca\xc9\x11\n\x98\xc9\xa5\xb4\x8d\x1f9-\xe1\x14\xbf\xda\x90\x94\x81\xdbr\xe0\xe9\xe9\xa6\xc9Zz\xbe\xdf8c\x8e}\x97\xce^Y\x0c\xcd`3\x1bQ\xf4\xe7wa\xe4P\x91\x80\xf8\xe2YB\xa7\x00\xf5Q\x80\x7f\x95\xcb\xdf\xca1\xc7\xb20\xcaA+\x8f\xe0=p\x04\xbf\xf6\xc6j5r\xb5l\x06\xfb2\xe2m\x16y\xfa\xc8\x06o\\1~\x1e\xbb\xf4\xc6ay\x81\xfd\xb8f\x98V\xc4\xc8\x88\xecD\x8c\x15`\xb1)\x99)\x06\xf7,=f\x90)\xf9\xe1\x1eq(2^\xb0\t\xbe\x18\xe0\n\xff\x16\xcc\x12^Y\x81<\x85\xe3$f\xb0\x81}]K\x0c,\x1b\xe4\x90p\xa38C\xf0\xca\x85p\xfa\xc55\xe5\x17w\xac\x0e\xef\xdc\x00\xe0\xaf3\xbb\xdb\x8f\x0b\x98\xc70\x80\xb3\xf8\xfb\'\x03>\xcbe\x19\x9b\xc0\x8b\x11\xe6\xa9Q!\xc9\x81\xd7H\x89\xe2\xc3\xfc\xbbE\xb0\xef{\x18\x10\n?+\xf5W\x1a\x01\x92N\x9c\x03?\x01\x7f<s\x8b\x85y\xefB\xef\xb1_\xfa\x83\xe1\x9f\xc1}\x84\x91{\xc4/\xc5e~\xe5\xde\\\xf0\xe2$\'\xf7\x02<]\xe2$\xd7(\x89\x9f\x03F\x0be^9\xbb\xd8\xdfs\xc2\x7f\x99+\x14\xd2M\xb0\xec\xc2|\xc9\xbb\x12N\xaf\x9c\xc0\xafx\xc0w\x9b7I\xd7\x9a/\xf6\xaf\xa0\xff\xd4\xdee\x1e\xe4d\xd9\x1fN\x16\x93\x0c.\x83/\x06x\x17\x93}\xe7JX\x15/iT\x18\xe1\xe1cu\x89\x8b\x95\xca\x17!\x13GV{\x12\xf6\x8d\xdbmG\xe5\xe1\xceh\x05\xa0t\xe6\x8b\x9a\x07\x19\xaf\xb4\xccp\xd9\xa0t[\x01^:\x7fb\xdc\x96\xbd\x9c\xefP\xc1\xfe\xb2\xce\xf7\\!\t\xf1\x07\xf0\x8fk\x1cO)\xa5\xff\x01\xddR\xe7\xef^\x12c\x06\x00\x00\x00\x00IEND\xaeB`\x82"))